// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List           = require("bs-platform/lib/js/list.js");
var Block          = require("bs-platform/lib/js/block.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var React          = require("react");
var Element        = require("../Element.js");
var Js_boolean     = require("bs-platform/lib/js/js_boolean.js");
var Pervasives     = require("bs-platform/lib/js/pervasives.js");
var DataService    = require("./services/DataService.js");
var ReasonReact    = require("reason-react/src/ReasonReact.js");
var ListOfElements = require("../RepeatedElement/ListOfElements.js");

function str(prim) {
  return prim;
}

function valueOfEvent($$event) {
  return $$event.target.value;
}

var getNewId = List.length;

function getNewNumber(data) {
  return List.length(data) + 1 | 0;
}

function save(elements_list) {
  DataService.set(elements_list);
  return /* () */0;
}

function getStoredData(send) {
  DataService.getStorage(/* () */0).then((function (result_promise) {
          return Promise.resolve(Curry._1(send, /* UpdateFromServer */Block.__(2, [result_promise])));
        }));
  return /* () */0;
}

var component = ReasonReact.reducerComponent("SetAndGetItemInService");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement("div", undefined, "Add element"), React.createElement("input", {
                          type: "text",
                          value: self[/* state */2][/* currentInput */2],
                          onChange: (function ($$event) {
                              return Curry._1(self[/* send */4], /* UpdateInput */Block.__(0, [$$event.target.value]));
                            })
                        }), React.createElement("button", {
                          disabled: Js_boolean.to_js_boolean(+(self[/* state */2][/* currentInput */2] === "")),
                          onClick: (function () {
                              return Curry._1(self[/* send */4], /* Add */Block.__(1, [self[/* state */2][/* currentInput */2]]));
                            })
                        }, "Add"), ReasonReact.element(/* None */0, /* None */0, ListOfElements.make(/* array */[], self[/* state */2][/* data */0])), React.createElement("button", {
                          disabled: Js_boolean.to_js_boolean(+(List.length(self[/* state */2][/* data */0]) === 0)),
                          onClick: (function () {
                              return Curry._1(self[/* send */4], /* Save */Block.__(3, [self[/* state */2][/* data */0]]));
                            })
                        }, "Save")), React.createElement("div", undefined, React.createElement("button", {
                          onClick: (function () {
                              return Curry._1(self[/* send */4], /* GetFromServer */0);
                            })
                        }, "Get"), ReasonReact.element(/* None */0, /* None */0, ListOfElements.make(/* array */[], self[/* state */2][/* dataStorage */1]))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* data : [] */0,
              /* dataStorage : [] */0,
              /* currentInput */""
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        return /* SideEffects */Block.__(2, [(function (self) {
                      return getStoredData(self[/* send */4]);
                    })]);
      } else {
        switch (action.tag | 0) {
          case 0 : 
              return /* Update */Block.__(0, [/* record */[
                          /* data */state[/* data */0],
                          /* dataStorage */state[/* dataStorage */1],
                          /* currentInput */action[0]
                        ]]);
          case 1 : 
              return /* Update */Block.__(0, [/* record */[
                          /* data */Pervasives.$at(state[/* data */0], /* :: */[
                                Element.makeElement(List.length(state[/* data */0]), action[0], List.length(state[/* data */0]) + 1 | 0),
                                /* [] */0
                              ]),
                          /* dataStorage */state[/* dataStorage */1],
                          /* currentInput */""
                        ]]);
          case 2 : 
              return /* Update */Block.__(0, [/* record */[
                          /* data */state[/* data */0],
                          /* dataStorage */action[0],
                          /* currentInput */state[/* currentInput */2]
                        ]]);
          case 3 : 
              DataService.set(action[0]);
              return /* NoUpdate */0;
          
        }
      }
    });
  return newrecord;
}

exports.str           = str;
exports.valueOfEvent  = valueOfEvent;
exports.getNewId      = getNewId;
exports.getNewNumber  = getNewNumber;
exports.save          = save;
exports.getStoredData = getStoredData;
exports.component     = component;
exports.make          = make;
/* component Not a pure module */
